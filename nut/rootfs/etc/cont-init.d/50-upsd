#!/usr/bin/with-contenv bash
# ==============================================================================
# Community Hass.io Add-ons: FTP
# Configures Network UPS Tools
# ==============================================================================
# shellcheck disable=SC1091
source /usr/lib/hassio-addons/base.sh

readonly UPS_CONF=/etc/nut/ups.conf
readonly UPSD_CONF=/etc/nut/upsd.conf
readonly NUT_CONF=/etc/nut/nut.conf

gen_ups_conf() {
    local name
    local driver
    local port
    local config

    {
        echo "# This file was automatically generated by Hass.io Network"
        echo "# UPS Tools add-on. Changes to this file will be overwritten."
    } > "${UPS_CONF}"

    for device in $(hass.config.get "devices|keys[]"); do
        name=$(hass.config.get "devices[${device}].name")
        driver=$(hass.config.get "devices[${device}].driver")
        port=$(hass.config.get "devices[${device}].port")

        {
            echo
            echo "[${name}]"
            echo "  driver = ${driver}"
            echo "  port = ${port}"
        } >> "${UPS_CONF}"

        for key in $(hass.config.get "devices[${device}].config|keys[]"); do
            config=$(hass.config.get "devices[${device}].config[${key}]")
            echo "  ${config}" >> "${UPS_CONF}"
        done
    done
}

gen_upsd_conf() {
    {
        echo "# This file was automatically generated by Hass.io Network"
        echo "# UPS Tools add-on. Changes to this file will be overwritten."
        echo
    } > "${UPSD_CONF}"

    for key in $(hass.config.get "upsd|keys[]"); do
        hass.config.get "upsd[${key}]" >> "${UPSD_CONF}"
    done
}

gen_nut_conf() {
    local mode
    local upsd_options
    local upsmon_options
    local poweroff_wait

    {
        echo "# This file was automatically generated by Hass.io Network"
        echo "# UPS Tools add-on. Changes to this file will be overwritten."
        echo
    } > "${NUT_CONF}"

    mode=$(hass.config.get "nut.mode")
    echo "MODE=${mode}" >> "${NUT_CONF}"

    if hass.config.has_value "nut.upsd_options"; then
        upsd_options=$(hass.config.get "nut.upsd_options")
        echo "UPSD_OPTIONS=\"${upsd_options}\"" >> "${NUT_CONF}"
    fi

    if hass.config.has_value "nut.upsmon_options"; then
        upsmon_options=$(hass.config.get "nut.upsmon_options")
        echo "UPSMON_OPTIONS=\"${upsmon_options}\"" >> "${NUT_CONF}"
    fi

    if hass.config.has_value "nut.poweroff_wait"; then
        poweroff_wait=$(hass.config.get "nut.poweroff_wait")
        echo "POWEROFF_WAIT=${poweroff_wait}" >> "${NUT_CONF}"
    fi
}

# ==============================================================================
# RUN LOGIC
# ------------------------------------------------------------------------------
main() {
    hass.log.info "Generating ${UPS_CONF}..."
    gen_ups_conf

    hass.log.info "Generating ${UPSD_CONF}..."
    gen_upsd_conf

    hass.log.info "Generating ${NUT_CONF}..."
    gen_nut_conf
}
main "$@"
